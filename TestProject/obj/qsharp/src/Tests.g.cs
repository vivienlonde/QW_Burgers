//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"WalkOperations\",\"Name\":\"TestEquality\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Diagnostics\",\"Name\":\"Test\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":6}}]},\"Argument\":{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"QuantumSimulator\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":7},\"Item2\":{\"Line\":1,\"Column\":25}}]}},\"Offset\":{\"Item1\":10,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" passes.\"],\"ClosingComments\":[]}},{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\vivie\\\\OneDrive\\\\Documents\\\\GitHub\\\\QW_Burgers\\\\TestProject\\\\Tests.qs\",\"Position\":{\"Item1\":11,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"WalkOperations\",\"Name\":\"TestEquality\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\vivie\\\\OneDrive\\\\Documents\\\\GitHub\\\\QW_Burgers\\\\TestProject\\\\Tests.qs\",\"Position\":{\"Item1\":11,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":23}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"WalkOperations\",\"Name\":\"TestDetermineAngleCircuit\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\vivie\\\\OneDrive\\\\Documents\\\\GitHub\\\\QW_Burgers\\\\TestProject\\\\Tests.qs\",\"Position\":{\"Item1\":27,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"WalkOperations\",\"Name\":\"TestDetermineAngleCircuit\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\vivie\\\\OneDrive\\\\Documents\\\\GitHub\\\\QW_Burgers\\\\TestProject\\\\Tests.qs\",\"Position\":{\"Item1\":27,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":36}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"WalkOperations\",\"Name\":\"TestSqrtFxP\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"BasicQuantumFunctionality\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"C:\\\\Users\\\\vivie\\\\OneDrive\\\\Documents\\\\GitHub\\\\QW_Burgers\\\\TestProject\\\\Tests.qs\",\"Position\":{\"Item1\":55,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"WalkOperations\",\"Name\":\"TestSqrtFxP\"},\"Attributes\":[],\"SourceFile\":\"C:\\\\Users\\\\vivie\\\\OneDrive\\\\Documents\\\\GitHub\\\\QW_Burgers\\\\TestProject\\\\Tests.qs\",\"Position\":{\"Item1\":55,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
#line hidden
namespace WalkOperations
{
    [SourceLocation("C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs", OperationFunctor.Body, 12, 28)]
    public partial class TestEquality : Operation<QVoid, QVoid>, ICallable
    {
        public TestEquality(IOperationFactory m) : base(m)
        {
        }

        public class QuantumSimulator
        {
            public QuantumSimulator(Xunit.Abstractions.ITestOutputHelper Output)
            {
                this.Output = Output;
            }

            internal Xunit.Abstractions.ITestOutputHelper Output
            {
                get;
            }

            [Xunit.Fact()]
            [Xunit.Trait("Target", "QuantumSimulator")]
            [Xunit.Trait("Name", "TestEquality")]
            public void TestEquality()
#line 12 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
            {
                var sim = new Microsoft.Quantum.Simulation.Simulators.QuantumSimulator();
                if (sim is Microsoft.Quantum.Simulation.Common.SimulatorBase baseSim && this.Output != null)
                {
                    baseSim.OnLog += this.Output.WriteLine;
                }

                try
                {
                    sim.Execute<TestEquality, QVoid, QVoid>(QVoid.Instance);
                }
                catch
                {
#line 12 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                    Xunit.Assert.True(false, "Q# Test failed. For details see the Standard output below.");
                }
                finally
                {
                    if (sim is IDisposable disposeSim)
                    {
                        disposeSim.Dispose();
                    }
                }
            }
        }

        String ICallable.Name => "TestEquality";
        String ICallable.FullName => "WalkOperations.TestEquality";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)> Equality__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Pauli>,IQArray<Qubit>,Result,String)> Microsoft__Quantum__Diagnostics__AssertMeasurement
        {
            get;
            set;
        }

        protected ICallable<Qubit, QVoid> Reset__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 14 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
            var n = 2L;
#line hidden
            {
#line 15 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                var firstRegister = Allocate__.Apply(n);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 16 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                        var secondRegister = Allocate__.Apply(n);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line hidden
                            {
#line 17 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                var outputQubit = Allocate__.Apply();
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 19 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    Equality__.Apply((firstRegister, secondRegister, outputQubit));
#line 21 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    Microsoft__Quantum__Diagnostics__AssertMeasurement.Apply((new QArray<Pauli>(Pauli.PauliZ), new QArray<Qubit>(outputQubit), Result.One, "Newly allocated registers must be equal."));
#line 23 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    Reset__.Apply(outputQubit);
#line 24 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    Message__.Apply("TestEquality passed.");
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(outputQubit);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(secondRegister);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(firstRegister);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Equality__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>>(typeof(Equality));
            this.Microsoft__Quantum__Diagnostics__AssertMeasurement = this.__Factory__.Get<IUnitary<(IQArray<Pauli>,IQArray<Qubit>,Result,String)>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertMeasurement));
            this.Reset__ = this.__Factory__.Get<ICallable<Qubit, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Reset));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestEquality, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs", OperationFunctor.Body, 28, 56)]
    public partial class TestDetermineAngleCircuit : Operation<QVoid, QVoid>, ICallable
    {
        public TestDetermineAngleCircuit(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "TestDetermineAngleCircuit";
        String ICallable.FullName => "WalkOperations.TestDetermineAngleCircuit";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Qubit>), Microsoft.Quantum.Arithmetic.FixedPoint> Microsoft__Quantum__Arithmetic__FixedPoint
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.FixedPoint,Microsoft.Quantum.Arithmetic.FixedPoint,Microsoft.Quantum.Arithmetic.FixedPoint)> DetermineAngleCircuit__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Pauli>,IQArray<Qubit>,Result,String)> Microsoft__Quantum__Diagnostics__AssertMeasurement
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 30 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
            var n = 2L;
#line hidden
            {
#line 31 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                var cQubitRegister = Allocate__.Apply(n);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 32 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                    var c = new Microsoft.Quantum.Arithmetic.FixedPoint((0L, cQubitRegister));
#line hidden
                    {
#line 33 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                        var bQubitRegister = Allocate__.Apply(n);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 34 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                            var b = new Microsoft.Quantum.Arithmetic.FixedPoint((0L, bQubitRegister));
#line hidden
                            {
#line 35 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                var thetaOverPiQubitRegister = Allocate__.Apply(n);
#line hidden
                                bool __arg3__ = true;
                                try
                                {
#line 36 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    var thetaOverPi = new Microsoft.Quantum.Arithmetic.FixedPoint((0L, thetaOverPiQubitRegister));
#line 39 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    Microsoft__Quantum__Intrinsic__X.Apply(cQubitRegister[1L]);
#line 40 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    Microsoft__Quantum__Intrinsic__X.Apply(bQubitRegister[0L]);
#line 45 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    DetermineAngleCircuit__.Apply((c, b, thetaOverPi));
#line 28 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(bQubitRegister[0L]);
#line 28 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(cQubitRegister[1L]);
#line 48 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    Microsoft__Quantum__Diagnostics__AssertMeasurement.Apply((new QArray<Pauli>(Pauli.PauliZ), new QArray<Qubit>(thetaOverPiQubitRegister[0L]), Result.Zero, "Theta is less than Pi/2"));
#line 49 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    Microsoft__Quantum__Diagnostics__AssertMeasurement.Apply((new QArray<Pauli>(Pauli.PauliZ), new QArray<Qubit>(thetaOverPiQubitRegister[1L]), Result.One, "Theta is Pi/4"));
#line 51 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    ResetAll__.Apply(thetaOverPiQubitRegister);
#line 52 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                                    Message__.Apply("TestDetermineAngleCircuit passed.");
                                }
#line hidden
                                catch
                                {
                                    __arg3__ = false;
                                    throw;
                                }
#line hidden
                                finally
                                {
                                    if (__arg3__)
                                    {
#line hidden
                                        Release__.Apply(thetaOverPiQubitRegister);
                                    }
                                }
                            }
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(bQubitRegister);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(cQubitRegister);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Arithmetic__FixedPoint = this.__Factory__.Get<ICallable<(Int64,IQArray<Qubit>), Microsoft.Quantum.Arithmetic.FixedPoint>>(typeof(global::Microsoft.Quantum.Arithmetic.FixedPoint));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.DetermineAngleCircuit__ = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.FixedPoint,Microsoft.Quantum.Arithmetic.FixedPoint,Microsoft.Quantum.Arithmetic.FixedPoint)>>(typeof(DetermineAngleCircuit));
            this.Microsoft__Quantum__Diagnostics__AssertMeasurement = this.__Factory__.Get<IUnitary<(IQArray<Pauli>,IQArray<Qubit>,Result,String)>>(typeof(global::Microsoft.Quantum.Diagnostics.AssertMeasurement));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestDetermineAngleCircuit, QVoid, QVoid>(QVoid.Instance);
        }
    }

    [SourceLocation("C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs", OperationFunctor.Body, 56, -1)]
    public partial class TestSqrtFxP : Operation<QVoid, QVoid>, ICallable
    {
        public TestSqrtFxP(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "TestSqrtFxP";
        String ICallable.FullName => "WalkOperations.TestSqrtFxP";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable<(Int64,IQArray<Qubit>), Microsoft.Quantum.Arithmetic.FixedPoint> Microsoft__Quantum__Arithmetic__FixedPoint
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(Microsoft.Quantum.Arithmetic.FixedPoint,Microsoft.Quantum.Arithmetic.FixedPoint)> ArithmeticOperations__SqrtFxP
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line 58 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
            var n = 5L;
#line hidden
            {
#line 59 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                var xQubitRegister = Allocate__.Apply(n);
#line hidden
                bool __arg1__ = true;
                try
                {
#line 60 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                    var x = new Microsoft.Quantum.Arithmetic.FixedPoint((n, xQubitRegister));
#line hidden
                    {
#line 61 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                        var resultQubitRegister = Allocate__.Apply(n);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 62 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                            var result = new Microsoft.Quantum.Arithmetic.FixedPoint((n, resultQubitRegister));
#line 65 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(xQubitRegister[0L]);
#line 66 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(xQubitRegister[3L]);
#line 67 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Apply(xQubitRegister[4L]);
#line 70 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                            ArithmeticOperations__SqrtFxP.Apply((x, result));
#line 56 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(xQubitRegister[4L]);
#line 56 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(xQubitRegister[3L]);
#line 56 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(xQubitRegister[0L]);
#line 81 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                            ResetAll__.Apply(resultQubitRegister);
#line 82 "C:\\Users\\vivie\\OneDrive\\Documents\\GitHub\\QW_Burgers\\TestProject\\Tests.qs"
                            Message__.Apply("TestSqrtFxP passed.");
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(resultQubitRegister);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(xQubitRegister);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Arithmetic__FixedPoint = this.__Factory__.Get<ICallable<(Int64,IQArray<Qubit>), Microsoft.Quantum.Arithmetic.FixedPoint>>(typeof(global::Microsoft.Quantum.Arithmetic.FixedPoint));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.ArithmeticOperations__SqrtFxP = this.__Factory__.Get<IUnitary<(Microsoft.Quantum.Arithmetic.FixedPoint,Microsoft.Quantum.Arithmetic.FixedPoint)>>(typeof(global::ArithmeticOperations.SqrtFxP));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<TestSqrtFxP, QVoid, QVoid>(QVoid.Instance);
        }
    }
}